/**********************************************************************
 Java CUP specification for a parser for C Flat programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal StructDeclNode   structDecl;
non terminal FnDeclNode       fnDecl;
non terminal FormalsListNode   formalsList;
non terminal LinkedList       formalsLList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal DeclListNode     structParams;
non terminal TypeNode         type;
non terminal IdNode           id;
 
 
/* NOTE: Add precedence and associativity declarations here */


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | structDecl:s
                {: RESULT = s;
                :}
                | fnDecl:func
                {: RESULT = func;
                :}
                ;                

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;

/* Defined a struct declaration */
structDecl      ::= STRUCT id:name LCURLY structParams:params RCURLY SEMICOLON
                {: RESULT = new StructDeclNode(name, params);
                :}
                ;

/* Processes inner parameters/decls of a struct */
structParams    ::= declList:vds
                {: RESULT = new DeclListNode(vds);
                :}
                ;

fnDecl          ::= type:t id:n LPAREN formalsList:fs RPAREN LCURLY fnBody:b RCURLY
                {: RESULT = new FnDeclNode(t,n,fs,b);
                :}
                ;

/* Represents entire list of function parameters; uses helper nonterminal formalsLList for
    managing trailing commas */
formalsList     ::= formalsLList:formals
                {: RESULT = new FormalsListNode(formals);
                :} 
                |
                {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                ;

formalsLList    ::= formalDecl:f
                {: LinkedList<FormalDeclNode> lst = new LinkedList<FormalDeclNode>();
                    lst.add(0,f);
                    RESULT  = lst;
                :}
                | formalDecl:f COMMA formalsLList:fs
                {:
                    fs.add(0,f);
                    RESULT = fs;
                :}
                ;

formalDecl      ::= type:t id:n
                {: RESULT = new FormalDeclNode(t,n);
                :}
                ;

fnBody          ::= 
                {: RESULT = new FnBodyNode(null, null);
                :}
                ;


/* Primitive types */
type            ::= INT
                {: RESULT = new IntNode();
                :}
                ;

type	       	::= BOOL
		        {: RESULT = new BoolNode();
		        :}
		        ;

type		    ::= VOID
		        {: RESULT = new VoidNode(); 
		        :}
		        ;
  

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
