
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\010\000" +
    "\002\007\003\000\002\010\012\000\002\011\003\000\002" +
    "\011\002\000\002\012\003\000\002\012\005\000\002\013" +
    "\004\000\002\014\004\000\002\015\004\000\002\015\002" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\004\000\002\016\005\000\002\016\005\000\002" +
    "\016\006\000\002\016\006\000\002\016\004\000\002\016" +
    "\005\000\002\017\012\000\002\020\017\000\002\021\012" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\004" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\025\006\000\002\026\003\000\002\026\002\000\002\027" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\005\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe\011" +
    "\ufffe\001\002\000\014\002\000\004\010\005\011\006\013" +
    "\011\012\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\032\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\024\ufffd\001\002\000\004\020\uffc4\001\002\000\004" +
    "\020\uffc3\001\002\000\004\020\020\001\002\000\004\020" +
    "\uffc2\001\002\000\004\020\020\001\002\000\032\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\016\uffff\017\uffff\020\uffff\024\uffff\001\002\000\032" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\016\ufffb\017\ufffb\020\ufffb\024\ufffb\001\002" +
    "\000\032\002\ufffc\004\ufffc\005\ufffc\006\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\016\ufffc\017\ufffc\020\ufffc\024\ufffc" +
    "\001\002\000\052\023\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\001\002\000\006\025\023\027\022" +
    "\001\002\000\032\002\ufffa\004\ufffa\005\ufffa\006\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\024\ufffa\001\002\000\012\004\010\005\011\006\013\026" +
    "\ufff5\001\002\000\004\026\ufff6\001\002\000\004\020\020" +
    "\001\002\000\004\026\032\001\002\000\006\026\ufff4\030" +
    "\030\001\002\000\010\004\010\005\011\006\013\001\002" +
    "\000\004\026\ufff3\001\002\000\004\023\033\001\002\000" +
    "\030\004\ufffe\005\ufffe\006\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\016\ufffe\017\ufffe\020\ufffe\024\ufffe\001\002\000" +
    "\030\004\010\005\011\006\013\011\012\012\uffef\013\uffef" +
    "\014\uffef\016\uffef\017\uffef\020\uffef\024\uffef\001\002\000" +
    "\004\024\036\001\002\000\032\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\024\ufff7\001\002\000\020\012\047\013\043" +
    "\014\045\016\040\017\052\020\020\024\ufff1\001\002\000" +
    "\004\025\166\001\002\000\050\025\157\026\uffcb\027\uffcb" +
    "\030\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\001\002\000\020\012\ufff0\013" +
    "\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\024\ufff0\001\002" +
    "\000\004\032\154\001\002\000\020\012\uffed\013\uffed\014" +
    "\uffed\016\uffed\017\uffed\020\uffed\024\uffed\001\002\000\004" +
    "\025\140\001\002\000\004\027\137\001\002\000\004\033" +
    "\134\001\002\000\004\027\133\001\002\000\020\012\uffec" +
    "\013\uffec\014\uffec\016\uffec\017\uffec\020\uffec\024\uffec\001" +
    "\002\000\022\007\062\010\063\020\020\021\071\022\064" +
    "\025\070\037\060\042\066\001\002\000\020\012\uffee\013" +
    "\uffee\014\uffee\016\uffee\017\uffee\020\uffee\024\uffee\001\002" +
    "\000\010\034\056\035\055\053\057\001\002\000\004\027" +
    "\130\001\002\000\004\027\127\001\002\000\022\007\062" +
    "\010\063\020\020\021\071\022\064\025\070\037\060\042" +
    "\066\001\002\000\022\007\062\010\063\020\020\021\071" +
    "\022\064\025\070\037\060\042\066\001\002\000\034\027" +
    "\uffcf\036\103\037\074\040\106\041\076\043\075\044\110" +
    "\045\107\046\077\047\104\050\102\051\100\052\101\001" +
    "\002\000\040\026\uffc8\027\uffc8\030\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\001\002\000\040\026\uffc7" +
    "\027\uffc7\030\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\001\002\000\040\026\uffc9\027\uffc9\030\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\001\002\000" +
    "\040\026\uffd2\027\uffd2\030\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\001\002\000\022\007\062\010\063" +
    "\020\020\021\071\022\064\025\070\037\060\042\066\001" +
    "\002\000\040\026\uffc5\027\uffc5\030\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\001\002\000\022\007\062" +
    "\010\063\020\020\021\071\022\064\025\070\037\060\042" +
    "\066\001\002\000\040\026\uffca\027\uffca\030\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\001\002\000\040" +
    "\026\uffd3\027\uffd3\030\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\001\002\000\034\026\105\036\103\037" +
    "\074\040\106\041\076\043\075\044\110\045\107\046\077" +
    "\047\104\050\102\051\100\052\101\001\002\000\022\007" +
    "\062\010\063\020\020\021\071\022\064\025\070\037\060" +
    "\042\066\001\002\000\022\007\062\010\063\020\020\021" +
    "\071\022\064\025\070\037\060\042\066\001\002\000\022" +
    "\007\062\010\063\020\020\021\071\022\064\025\070\037" +
    "\060\042\066\001\002\000\022\007\062\010\063\020\020" +
    "\021\071\022\064\025\070\037\060\042\066\001\002\000" +
    "\022\007\062\010\063\020\020\021\071\022\064\025\070" +
    "\037\060\042\066\001\002\000\022\007\062\010\063\020" +
    "\020\021\071\022\064\025\070\037\060\042\066\001\002" +
    "\000\022\007\062\010\063\020\020\021\071\022\064\025" +
    "\070\037\060\042\066\001\002\000\022\007\062\010\063" +
    "\020\020\021\071\022\064\025\070\037\060\042\066\001" +
    "\002\000\022\007\062\010\063\020\020\021\071\022\064" +
    "\025\070\037\060\042\066\001\002\000\040\026\uffc6\027" +
    "\uffc6\030\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\001\002\000\022\007\062\010\063\020\020\021\071" +
    "\022\064\025\070\037\060\042\066\001\002\000\022\007" +
    "\062\010\063\020\020\021\071\022\064\025\070\037\060" +
    "\042\066\001\002\000\022\007\062\010\063\020\020\021" +
    "\071\022\064\025\070\037\060\042\066\001\002\000\040" +
    "\026\uffdc\027\uffdc\030\uffdc\036\103\037\074\040\106\041" +
    "\076\043\075\044\uffdc\045\107\046\077\047\104\050\102" +
    "\051\100\052\101\001\002\000\024\026\uffdb\027\uffdb\030" +
    "\uffdb\036\103\037\074\040\106\041\076\043\uffdb\044\uffdb" +
    "\001\002\000\040\026\uffdf\027\uffdf\030\uffdf\036\uffdf\037" +
    "\074\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\024\026" +
    "\uffd9\027\uffd9\030\uffd9\036\103\037\074\040\106\041\076" +
    "\043\uffd9\044\uffd9\001\002\000\040\026\uffe1\027\uffe1\030" +
    "\uffe1\036\uffe1\037\074\040\106\041\076\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\001" +
    "\002\000\024\026\uffd8\027\uffd8\030\uffd8\036\103\037\074" +
    "\040\106\041\076\043\uffd8\044\uffd8\001\002\000\024\026" +
    "\uffd6\027\uffd6\030\uffd6\036\103\037\074\040\106\041\076" +
    "\043\uffd6\044\uffd6\001\002\000\024\026\uffd7\027\uffd7\030" +
    "\uffd7\036\103\037\074\040\106\041\076\043\uffd7\044\uffd7" +
    "\001\002\000\024\026\uffda\027\uffda\030\uffda\036\103\037" +
    "\074\040\106\041\076\043\uffda\044\uffda\001\002\000\040" +
    "\026\uffde\027\uffde\030\uffde\036\uffde\037\074\040\uffde\041" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\001\002\000\040\026\uffdd\027\uffdd\030" +
    "\uffdd\036\103\037\074\040\106\041\076\043\uffdd\044\uffdd" +
    "\045\107\046\077\047\104\050\102\051\100\052\101\001" +
    "\002\000\036\026\uffe0\027\uffe0\030\uffe0\036\uffe0\040\uffe0" +
    "\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\001\002\000\036\026\uffd5\027\uffd5" +
    "\030\uffd5\036\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\001\002" +
    "\000\036\026\uffd4\027\uffd4\030\uffd4\036\uffd4\040\uffd4\041" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\001\002\000\020\012\uffea\013\uffea\014" +
    "\uffea\016\uffea\017\uffea\020\uffea\024\uffea\001\002\000\020" +
    "\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9\024" +
    "\uffe9\001\002\000\034\027\132\036\103\037\074\040\106" +
    "\041\076\043\075\044\110\045\107\046\077\047\104\050" +
    "\102\051\100\052\101\001\002\000\020\012\uffe5\013\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\020\uffe5\024\uffe5\001\002\000" +
    "\020\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\024\uffe6\001\002\000\022\007\062\010\063\020\020\021" +
    "\071\022\064\025\070\037\060\042\066\001\002\000\034" +
    "\027\136\036\103\037\074\040\106\041\076\043\075\044" +
    "\110\045\107\046\077\047\104\050\102\051\100\052\101" +
    "\001\002\000\020\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\024\uffe8\001\002\000\020\012\uffeb\013\uffeb" +
    "\014\uffeb\016\uffeb\017\uffeb\020\uffeb\024\uffeb\001\002\000" +
    "\022\007\062\010\063\020\020\021\071\022\064\025\070" +
    "\037\060\042\066\001\002\000\034\026\142\036\103\037" +
    "\074\040\106\041\076\043\075\044\110\045\107\046\077" +
    "\047\104\050\102\051\100\052\101\001\002\000\004\023" +
    "\143\001\002\000\030\004\ufffe\005\ufffe\006\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\016\ufffe\017\ufffe\020\ufffe\024" +
    "\ufffe\001\002\000\030\004\010\005\011\006\013\011\012" +
    "\012\uffef\013\uffef\014\uffef\016\uffef\017\uffef\020\uffef\024" +
    "\uffef\001\002\000\020\012\047\013\043\014\045\016\040" +
    "\017\052\020\020\024\146\001\002\000\022\012\uffe4\013" +
    "\uffe4\014\uffe4\015\147\016\uffe4\017\uffe4\020\uffe4\024\uffe4" +
    "\001\002\000\004\023\150\001\002\000\030\004\ufffe\005" +
    "\ufffe\006\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\024\ufffe\001\002\000\030\004\010\005" +
    "\011\006\013\011\012\012\uffef\013\uffef\014\uffef\016\uffef" +
    "\017\uffef\020\uffef\024\uffef\001\002\000\020\012\047\013" +
    "\043\014\045\016\040\017\052\020\020\024\153\001\002" +
    "\000\020\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\024\uffe3\001\002\000\022\007\062\010\063\020\020" +
    "\021\071\022\064\025\070\037\060\042\066\001\002\000" +
    "\034\027\156\036\103\037\074\040\106\041\076\043\075" +
    "\044\110\045\107\046\077\047\104\050\102\051\100\052" +
    "\101\001\002\000\020\012\uffe7\013\uffe7\014\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\024\uffe7\001\002\000\024\007\062\010" +
    "\063\020\020\021\071\022\064\025\070\026\uffcc\037\060" +
    "\042\066\001\002\000\036\026\uffd0\030\uffd0\036\103\037" +
    "\074\040\106\041\076\043\075\044\110\045\107\046\077" +
    "\047\104\050\102\051\100\052\101\001\002\000\006\026" +
    "\uffcd\030\164\001\002\000\004\026\163\001\002\000\040" +
    "\026\uffce\027\uffce\030\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\001\002\000\022\007\062\010\063\020" +
    "\020\021\071\022\064\025\070\037\060\042\066\001\002" +
    "\000\036\026\uffd1\030\uffd1\036\103\037\074\040\106\041" +
    "\076\043\075\044\110\045\107\046\077\047\104\050\102" +
    "\051\100\052\101\001\002\000\022\007\062\010\063\020" +
    "\020\021\071\022\064\025\070\037\060\042\066\001\002" +
    "\000\034\026\170\036\103\037\074\040\106\041\076\043" +
    "\075\044\110\045\107\046\077\047\104\050\102\051\100" +
    "\052\101\001\002\000\004\023\171\001\002\000\030\004" +
    "\ufffe\005\ufffe\006\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\016\ufffe\017\ufffe\020\ufffe\024\ufffe\001\002\000\030\004" +
    "\010\005\011\006\013\011\012\012\uffef\013\uffef\014\uffef" +
    "\016\uffef\017\uffef\020\uffef\024\uffef\001\002\000\020\012" +
    "\047\013\043\014\045\016\040\017\052\020\020\024\174" +
    "\001\002\000\020\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\024\uffe2\001\002\000\006\026\ufff2\030\ufff2" +
    "\001\002\000\004\023\177\001\002\000\014\004\ufffe\005" +
    "\ufffe\006\ufffe\011\ufffe\024\ufffe\001\002\000\014\004\010" +
    "\005\011\006\013\011\012\024\ufff8\001\002\000\004\024" +
    "\202\001\002\000\004\027\203\001\002\000\032\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\024\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\002\004\003\003\001\001\000\014\004" +
    "\014\005\006\006\016\010\015\031\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\175\001\001\000\002" +
    "\001\001\000\004\032\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\025\012\023\013" +
    "\026\031\024\001\001\000\002\001\001\000\004\032\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\030\013\026\031\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\033\014\034\001\001\000\016\004" +
    "\014\005\006\006\016\010\015\015\036\031\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\041\017" +
    "\052\020\043\021\050\024\045\025\047\027\053\032\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\130\025\066\027\071\030\064" +
    "\032\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\060\025\066" +
    "\027\071\030\064\032\040\001\001\000\014\022\125\025" +
    "\066\027\071\030\064\032\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\124\025\066\027\071\030\064" +
    "\032\040\001\001\000\002\001\001\000\014\022\072\025" +
    "\066\027\071\030\064\032\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\123\025" +
    "\066\027\071\030\064\032\040\001\001\000\014\022\122" +
    "\025\066\027\071\030\064\032\040\001\001\000\014\022" +
    "\121\025\066\027\071\030\064\032\040\001\001\000\014" +
    "\022\120\025\066\027\071\030\064\032\040\001\001\000" +
    "\014\022\117\025\066\027\071\030\064\032\040\001\001" +
    "\000\014\022\116\025\066\027\071\030\064\032\040\001" +
    "\001\000\014\022\115\025\066\027\071\030\064\032\040" +
    "\001\001\000\014\022\114\025\066\027\071\030\064\032" +
    "\040\001\001\000\014\022\113\025\066\027\071\030\064" +
    "\032\040\001\001\000\002\001\001\000\014\022\112\025" +
    "\066\027\071\030\064\032\040\001\001\000\014\022\111" +
    "\025\066\027\071\030\064\032\040\001\001\000\014\022" +
    "\110\025\066\027\071\030\064\032\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\134" +
    "\025\066\027\071\030\064\032\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\140" +
    "\025\066\027\071\030\064\032\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\143\001\001\000\016" +
    "\004\014\005\006\006\016\010\015\015\144\031\013\001" +
    "\001\000\022\016\041\017\052\020\043\021\050\024\045" +
    "\025\047\027\053\032\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\150\001\001\000\016\004\014" +
    "\005\006\006\016\010\015\015\151\031\013\001\001\000" +
    "\022\016\041\017\052\020\043\021\050\024\045\025\047" +
    "\027\053\032\040\001\001\000\002\001\001\000\014\022" +
    "\154\025\066\027\071\030\064\032\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\157\023\160\025" +
    "\066\026\161\027\071\030\064\032\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\164\025\066\027\071\030\064\032\040" +
    "\001\001\000\002\001\001\000\014\022\166\025\066\027" +
    "\071\030\064\032\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\171\001\001\000\016\004\014\005" +
    "\006\006\016\010\015\015\172\031\013\001\001\000\022" +
    "\016\041\017\052\020\043\021\050\024\045\025\047\027" +
    "\053\032\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\177\007\200\001\001\000" +
    "\014\004\014\005\006\006\016\010\015\031\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(new DeclListNode(d));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              LinkedList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.addLast(d);
                   RESULT = dl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<DeclNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl 
            {
              DeclNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= structDecl 
            {
              DeclNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructDeclNode s = (StructDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= fnDecl 
            {
              DeclNode RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FnDeclNode func = (FnDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = func;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDecl ::= type id SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // structDecl ::= STRUCT id LCURLY structParams RCURLY SEMICOLON 
            {
              StructDeclNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdNode name = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclListNode params = (DeclListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StructDeclNode(name, params);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // structParams ::= declList 
            {
              DeclListNode RESULT =null;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList vds = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclListNode(vds);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structParams",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fnDecl ::= type id LPAREN formalsList RPAREN LCURLY fnBody RCURLY 
            {
              FnDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		IdNode n = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FormalsListNode fs = (FormalsListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FnBodyNode b = (FnBodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FnDeclNode(t,n,fs,b);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formalsList ::= formalsLList 
            {
              FormalsListNode RESULT =null;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList formals = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FormalsListNode(formals);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formalsList ::= 
            {
              FormalsListNode RESULT =null;
		 RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalsLList ::= formalDecl 
            {
              LinkedList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalDeclNode f = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<FormalDeclNode> lst = new LinkedList<FormalDeclNode>();
                    lst.add(0,f);
                    RESULT  = lst;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsLList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalsLList ::= formalDecl COMMA formalsLList 
            {
              LinkedList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalDeclNode f = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList fs = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    fs.add(0,f);
                    RESULT = fs;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsLList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalDecl ::= type id 
            {
              FormalDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode n = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FormalDeclNode(t,n);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fnBody ::= declList stmtList 
            {
              FnBodyNode RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ds = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList ss = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FnBodyNode(new DeclListNode(ds), 
                    new StmtListNode(ss));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnBody",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmtList ::= stmtList stmt 
            {
              LinkedList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ss = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtNode s = (StmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.addLast(s);
                   RESULT = ss;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmtList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<StmtNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= ifStmt 
            {
              StmtNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmtNode s = (IfStmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= ifElseStmt 
            {
              StmtNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfElseStmtNode s = (IfElseStmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= whileStmt 
            {
              StmtNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmtNode s = (WhileStmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= assignExp SEMICOLON 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignNode e = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStmtNode(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= var PLUSPLUS SEMICOLON 
            {
              StmtNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode v = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostIncStmtNode(v);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= var MINUSMINUS SEMICOLON 
            {
              StmtNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode v = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostDecStmtNode(v);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= CIN READ exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadStmtNode(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteStmtNode(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= fnExp SEMICOLON 
            {
              StmtNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallExpNode fc = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmtNode(fc);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= RETURN exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmtNode(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ifStmt ::= IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY 
            {
              IfStmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList ds = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ss = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmtNode(e, 
                    new DeclListNode(ds), 
                    new StmtListNode(ss));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ifElseStmt ::= IF LPAREN exp RPAREN LCURLY declList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY 
            {
              IfElseStmtNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ds1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ds1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList ds1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ss1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ss1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList ss1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ds2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ds2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList ds2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ss2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ss2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ss2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseStmtNode(e1, 
                    new DeclListNode(ds1), 
                    new StmtListNode(ss1),
                    new DeclListNode(ds2), 
                    new StmtListNode(ss2));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifElseStmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // whileStmt ::= WHILE LPAREN exp RPAREN LCURLY declList stmtList RCURLY 
            {
              WhileStmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList ds = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ss = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmtNode(e, 
                    new DeclListNode(ds), 
                    new StmtListNode(ss));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp PLUS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp MINUS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp TIMES exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimesNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp DIVIDE exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivideNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp AND exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp OR exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp EQUALS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualsNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp NOTEQUALS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualsNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp LESS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp GREATER exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp LESSEQ exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessEqNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp GREATEREQ exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterEqNode(e1,e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= NOT exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotNode(e1);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= MINUS exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinusNode(e1);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= var 
            {
              ExpNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode v = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= literal 
            {
              ExpNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expList ::= expList COMMA exp 
            {
              LinkedList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList es = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode s = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 es.addLast(s);
                    RESULT = es;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expList ::= exp 
            {
              LinkedList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode s = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ExpNode> es = new LinkedList<ExpNode>();
                   es.addLast(s);
                   RESULT = es;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignExp ::= var ASSIGN exp 
            {
              AssignNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode v = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignNode(v,e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fnExp ::= id LPAREN paramList RPAREN 
            {
              CallExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ps = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new CallExpNode(i,new ExpListNode(ps));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnExp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramList ::= expList 
            {
              LinkedList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList es = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // paramList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<ExpNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var ::= id 
            {
              ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= INTLITERAL 
            {
              ExpNode RESULT =null;
		int intlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLitTokenVal intl = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLitNode(intl.linenum,
                     intl.charnum,
                     intl.intVal);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= STRINGLITERAL 
            {
              ExpNode RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StrLitTokenVal str = (StrLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLitNode(str.linenum, 
                     str.charnum, 
                     str.strVal);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= TRUE 
            {
              ExpNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenVal t1 = (TokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    TokenVal t = (TokenVal) t1;
                    RESULT = new TrueNode(t.linenum, t.charnum);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= FALSE 
            {
              ExpNode RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenVal f1 = (TokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  TokenVal f = (TokenVal) f1;
                    RESULT = new FalseNode(f.linenum, f.charnum);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= LPAREN exp RPAREN 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= fnExp 
            {
              ExpNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExpNode f = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= INT 
            {
              TypeNode RESULT =null;
		 RESULT = new IntNode();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= BOOL 
            {
              TypeNode RESULT =null;
		 RESULT = new BoolNode();
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= VOID 
            {
              TypeNode RESULT =null;
		 RESULT = new VoidNode(); 
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // id ::= ID 
            {
              IdNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdTokenVal i = (IdTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
